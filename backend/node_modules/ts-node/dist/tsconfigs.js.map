{"version":3,"file":"tsconfigs.js","sourceRoot":"","sources":["../src/tsconfigs.ts"],"names":[],"mappings":";;;AAEA,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACpE;;;;GAIG;AACH,SAAgB,oCAAoC,CAAC,EAAY;IAC/D,MAAM,UAAU,GAAG,EAAuB,CAAC;IAC3C,IAAI,SAAS,IAAI,EAAE,EAAE;QACnB,MAAM,MAAM,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;QACzD,IAAI,gBAAgB,CAAC,MAAM,CAAC;YAAE,OAAO,MAAM,CAAC;KAC7C;IACD,IAAI,SAAS,IAAI,EAAE,EAAE;QACnB,MAAM,MAAM,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;QACzD,IAAI,gBAAgB,CAAC,MAAM,CAAC;YAAE,OAAO,MAAM,CAAC;KAC7C;IACD,IAAI,SAAS,IAAI,EAAE,EAAE;QACnB,MAAM,MAAM,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;QACzD,IAAI,gBAAgB,CAAC,MAAM,CAAC;YAAE,OAAO,MAAM,CAAC;KAC7C;IACD;QACE,MAAM,MAAM,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;QACzD,IAAI,gBAAgB,CAAC,MAAM,CAAC;YAAE,OAAO,MAAM,CAAC;KAC7C;IACD,mFAAmF;IACnF,yBAAyB;IACzB,OAAO,EAAE,CAAC;IAEV,sFAAsF;IACtF,SAAS,gBAAgB,CAAC,MAOzB;QACC,MAAM,OAAO,GAAG,EAAE,CAAC,0BAA0B,CAC3C;YACE,eAAe,EAAE,MAAM,CAAC,eAAe;YACvC,KAAK,EAAE,CAAC,QAAQ,CAAC;SAClB,EACD,eAAe,EACf,EAAE,CACH,CAAC;QACF,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;IACrC,CAAC;AACH,CAAC;AAzCD,oFAyCC;AAED,MAAM,eAAe,GAAG;IACtB,yBAAyB,EAAE,KAAK;IAChC,aAAa,CACX,OAAe,EACf,UAA6B,EAC7B,QAAuC,EACvC,QAA2B,EAC3B,KAAc;QAEd,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,UAAU,CAAC,IAAY;QACrB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,QAAQ,CAAC,IAAY;QACnB,OAAO,EAAE,CAAC;IACZ,CAAC;CACF,CAAC","sourcesContent":["import type { TSCommon, TSInternal } from './ts-compiler-types';\n\nconst nodeMajor = parseInt(process.versions.node.split('.')[0], 10);\n/**\n * return parsed JSON of the bundled @tsconfig/bases config appropriate for the\n * running version of nodejs\n * @internal\n */\nexport function getDefaultTsconfigJsonForNodeVersion(ts: TSCommon): any {\n  const tsInternal = ts as any as TSInternal;\n  if (nodeMajor >= 20) {\n    const config = require('@tsconfig/node20/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  if (nodeMajor >= 18) {\n    const config = require('@tsconfig/node18/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  if (nodeMajor >= 16) {\n    const config = require('@tsconfig/node16/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  {\n    const config = require('@tsconfig/node14/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  // Old TypeScript compilers may be incompatible with *all* @tsconfig/node* configs,\n  // so fallback to nothing\n  return {};\n\n  // Verify that tsconfig target and lib options are compatible with TypeScript compiler\n  function configCompatible(config: {\n    compilerOptions: {\n      lib: string[];\n      target: string;\n      module: string;\n      moduleResolution: string;\n    };\n  }) {\n    const results = ts.parseJsonConfigFileContent(\n      {\n        compilerOptions: config.compilerOptions,\n        files: ['foo.ts'],\n      },\n      parseConfigHost,\n      ''\n    );\n    return results.errors.length === 0;\n  }\n}\n\nconst parseConfigHost = {\n  useCaseSensitiveFileNames: false,\n  readDirectory(\n    rootDir: string,\n    extensions: readonly string[],\n    excludes: readonly string[] | undefined,\n    includes: readonly string[],\n    depth?: number\n  ) {\n    return [];\n  },\n  fileExists(path: string) {\n    return false;\n  },\n  readFile(path: string) {\n    return '';\n  },\n};\n"]}