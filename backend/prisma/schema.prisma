// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ExpenseCategory {
  TRAVEL
  FOOD
  OFFICE
  EQUIPMENT
  SOFTWARE
  OTHER
}

enum ExpenseStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  EXPENSE_SUBMITTED
  APPROVAL_REQUIRED
  EXPENSE_APPROVED
  EXPENSE_REJECTED
}

enum ActivityAction {
  LOGIN
  EXPENSE_CREATED
  EXPENSE_APPROVED
  EXPENSE_REJECTED
  USER_CREATED
}

model Company {
  id           String  @id @default(uuid())
  name         String
  currencyCode String  @default("USD") @map("currency_code")
  country      String?
  settings     Json    @default("{}")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  users               User[]
  expenses            Expense[]
  approvalWorkflows   ApprovalWorkflow[]
  notifications       Notification[]

  @@map("companies")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  role        UserRole @default(EMPLOYEE)
  companyId   String   @map("company_id")
  managerId   String?  @map("manager_id")
  isActive    Boolean  @default(true) @map("is_active")
  avatarUrl   String?  @map("avatar_url")
  preferences Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  company              Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  manager              User?          @relation("UserManager", fields: [managerId], references: [id])
  subordinates         User[]         @relation("UserManager")
  expenses             Expense[]
  approvalSteps        ApprovalStep[]
  notifications        Notification[]
  activityLogs         ActivityLog[]
  createdWorkflows     ApprovalWorkflow[] @relation("WorkflowCreator")

  @@map("users")
}

model Expense {
  id               String          @id @default(uuid())
  employeeId       String          @map("employee_id")
  amount           Decimal         @db.Decimal(12, 2)
  originalCurrency String          @map("original_currency")
  convertedAmount  Decimal         @map("converted_amount") @db.Decimal(12, 2)
  exchangeRate     Decimal?        @map("exchange_rate") @db.Decimal(10, 6)
  category         ExpenseCategory
  subcategory      String?
  description      String
  expenseDate      DateTime        @map("expense_date") @db.Date
  receiptUrl       String?         @map("receipt_url")
  receiptData      Json?           @map("receipt_data")
  status           ExpenseStatus   @default(PENDING)
  location         Json?
  tags             String[]
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  company          Company        @relation(fields: [employeeId], references: [id])
  employee         User           @relation(fields: [employeeId], references: [id])
  approvalSteps    ApprovalStep[]
  activityLogs     ActivityLog[]

  @@map("expenses")
}

model ApprovalWorkflow {
  id          String  @id @default(uuid())
  companyId   String  @map("company_id")
  name        String
  description String?
  rules       Json
  conditions  Json?
  isActive    Boolean @default(true) @map("is_active")
  createdBy   String  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  company     Company @relation(fields: [companyId], references: [id])
  creator     User    @relation("WorkflowCreator", fields: [createdBy], references: [id])

  @@map("approval_workflows")
}

model ApprovalStep {
  id         String         @id @default(uuid())
  expenseId  String         @map("expense_id")
  approverId String         @map("approver_id")
  stepOrder  Int            @map("step_order")
  status     ApprovalStatus @default(PENDING)
  comments   String?
  approvedAt DateTime?      @map("approved_at")
  createdAt  DateTime       @default(now()) @map("created_at")

  // Relations
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  approver  User    @relation(fields: [approverId], references: [id])

  @@map("approval_steps")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model ActivityLog {
  id        String         @id @default(uuid())
  userId    String?        @map("user_id")
  expenseId String?        @map("expense_id")
  action    ActivityAction
  details   Json?
  ipAddress String?        @map("ip_address")
  userAgent String?        @map("user_agent")
  createdAt DateTime       @default(now()) @map("created_at")

  // Relations
  user    User?    @relation(fields: [userId], references: [id])
  expense Expense? @relation(fields: [expenseId], references: [id])

  @@map("activity_logs")
}